# Ansible Configuration
# Source of truth on this configuration is located here:
# https://github.com/ansiblejunky/ansible-project-template/blob/master/ansible.cfg
# Generate latest ansible configuration options using: ansible-config init > ansible.cfg.template
# Full documentaiton of all configuration options:
# https://docs.ansible.com/ansible/latest/reference_appendices/config.html

[defaults]
# (string) This setting controls the default policy of fact gathering (facts discovered about remote systems).
# This option can be useful for those wishing to save fact gathering time. Both 'smart' and 'explicit' will use the cache plugin.
gathering=explicit

# Deprecated in Ansible 2.18, use module_defaults instead along with ansible.builtin.setup module
#gather_timeout          = 30
# Deprecated in Ansible 2.18, use module_defaults instead along with ansible.builtin.setup module
#fact_path               = facts.d

# (string) Chooses which cache plugin to use, the default 'memory' is ephemeral.
fact_caching=jsonfile
# (string) Defines connection or path information for the cache plugin
fact_caching_connection=facts.d
# (integer) Expiration timeout for the cache plugin data
fact_caching_timeout=86400
# (string) Prefix to use for cache plugin files/tables
fact_caching_prefix=ansible_facts

roles_path=roles
collections_path=collections

# (string) Path to the Python interpreter to be used for module execution on remote targets, 
# or an automatic discovery mode. Supported discovery modes are ``auto`` (the default), 
# ``auto_silent``, ``auto_legacy``, and ``auto_legacy_silent``. All discovery modes employ 
# a lookup table to use the included system Python (on distributions known to include one), 
# falling back to a fixed ordered list of well-known Python interpreter locations if a 
# platform-specific default is not available. The fallback behavior will issue a warning that
# the interpreter should be set explicitly (since interpreters installed later may change which
# one is used). This warning behavior can be disabled by setting ``auto_silent`` or ``auto_legacy_silent``.
# The value of ``auto_legacy`` provides all the same behavior, but for backwards-compatibility
# with older Ansible releases that always defaulted to ``/usr/bin/python``, will use that interpreter if present.
interpreter_python=auto_silent

# (boolean) Controls whether callback plugins are loaded when running /usr/bin/ansible. 
# This may be used to log activity from the command line, send notifications, and so on. 
# Callback plugins are always loaded for ``ansible-playbook``.
bin_ansible_callbacks=True

# Set temporary remote path where Ansible stores modules; useful for debugging purposes
# https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#running-on-solaris
remote_tmp=/tmp/.ansible-${USER}/tmp

# (string) Set the main callback used to display Ansible output. You can only have one at a time.
# You can have many other callbacks, but just one can be in charge of stdout.
# See :ref:`callback_plugins` for a list of available options.
#stdout_callback=community.general.yaml
stdout_callback=ansible.posix.debug

# (integer) Maximum number of forks Ansible will use to execute tasks on target hosts.
forks=15

# (integer) This is the default timeout for connection plugins to use.
timeout=30
# (boolean) Set this to "False" if you want to avoid host key checking by the underlying tools Ansible uses to connect to the host
host_key_checking=False
# (bool) This controls whether a failed Ansible playbook should create a .retry file.
retry_files_enabled=False
# (boolean) Toggle Ansible logging to syslog on the target when it executes tasks. On Windows hosts this will disable a newer style PowerShell modules from writing to the event log.
no_target_syslog=False

# (path) File to which Ansible will log on the controller. When empty logging is disabled.
log_path=.ansible.log

# (list) List of enabled callbacks, not all callbacks need enabling, but many of those shipped with Ansible do as we don't want them activated by default.
callbacks_enabled=profile_tasks.new, timer.new, profile_roles.new, ansible.posix.debug

# (path) The vault password file to use. Equivalent to --vault-password-file or --vault-id
# If executable, it will be run and the resulting stdout will be used as the password.
;vault_password_file=~/.ansible_vault_password

[ssh_connection]

# Find information about ssh plugin options here:
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ssh_connection.html

# (boolean) This is a global option, each connection plugin can override either by having more specific options or not supporting pipelining at all.
# Pipelining, if supported by the connection plugin, reduces the number of network operations required to execute a module on the remote server, by executing many Ansible modules without actual file transfer.
# It can result in a very significant performance improvement when enabled.
# However this conflicts with privilege escalation (become). For example, when using 'sudo:' operations you must first disable 'requiretty' in /etc/sudoers on all managed hosts, which is why it is disabled by default.
# This setting will be disabled if ``ANSIBLE_KEEP_REMOTE_FILES`` is enabled.
pipelining=True

# Deprecated in version 2.17 in favor of `ssh_transfer_method`
# (boolean) Preferred method to use when transferring files over SSH.
# When set to smart, Ansible will try them until one succeeds or they all fail.
# If set to True, it will force ‘scp’, if False it will use ‘sftp’.
scp_if_ssh=True

# (string) Arguments to pass to all SSH CLI tools.
ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o PreferredAuthentications=publickey
# Using custom ssh configuration file for jump hosts:
#ssh_args=" -F ./ssh.cfg -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no"

[persistent_connection]

# (integer) This controls how long the persistent connection will remain idle before it is destroyed.
connect_timeout=60
# (int) This controls the amount of time to wait for response from remote device before timing out persistent connection.
command_timeout=60
